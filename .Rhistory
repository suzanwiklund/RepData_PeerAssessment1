z<-10
f(3)
x<-5
y<-if(x<3){
NA
}
else{
10
}
x<-5
y<-if(x<3){ NA}
else { 10}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
update.packages(checkBuilt=TRUE,ask=FALSE)
q()
library(swirl)
swirl()
install_from_swirl("Getting_and_Cleaning_Data")
swirl()
mydf <-read.csv(path2csv, stringASFactors=FALSE)
mydf <-read.csv(path2csv, stringsASFactors=FALSE)
mydf <-read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:county)
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version =="3.1.1", country =="US")
?Comparison
filter(cran,r_version <="3.0.2", country IN "India")
filter(cran,r_version <="3.0.2", country %IN% "India")
filter(cran,r_version <="3.0.2", country == "India")
filter(cran,r_version <="3.0.2", country == "IN")
filter(cran,country =="US"||country=="IN")
filter(cran,country =="US"|country=="IN")
filter(cran,size>100500,r_os =="linux_gnu")
filter(cran,size>100500,r_os =="linux-gnu")
is.na((c(3,4,NA,10)))
is.na((c(3,5,NA,10)))
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,frdv(ip_id)
arrange(cran2,desc(ip_id)
arrange(cran2,desc(ip_id)
)
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),desc(ip_id))
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb = size/2^20)
mutate(cran3,size_mb = size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size = size +1000)
summarize(cran,avg_bytes=mean(size))
install.packages("httr")
install.packages("httpuv")
library(httr)
library(httpuv)
github<-oauth_endpoints("github")
myapp <- oauth_app("github",key= "7fa3d99a7a24ee33d631",
secret="5bbbd0a053cbab8fe3a6a086522e3aefe268f81a")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
messy_stuff<-content(req)
df<-fromJSON(toJSON(messy_stuff))
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
df<-fromJSON(toJSON(messy_stuff))
df
names(df)
df("name","created_at")
df(df$name,df$created_at)
df[,(df$name,df$created_at)]
df[,(df$name df$created_at)]
df[,(c(df$name, df$created_at))]
library(swirl)
swirl()
mydf <- read.csv(path2csv,stringsASFactors=FALSE)
mydf <- read.csv(path2csv,stringsASFactors = FALSE)
?read.csv
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran,-(r_arch:country))
select(cran,country:r_arch)
cran
select(cran, -time)
select(cran,-(x:size))
select(cran,-(X:size))
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran, package =="swirl")
filter(cran, r_version =="3.1.1", country =="US")
?Comparison
filter(cran,country == "IN", r_version <= "3.0.2")
filter(cran, country =="IN" | country =="US")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
select(cran,size:ip_id)
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package_ip_id)
arrange(cran2,package, ip_id)
arrange(cran2,country, desc(r_version),ip_id)
cran3 <-select(cran,ip_id, package, size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size = size -1000)
mutate(cran3,correct_size = size +1000)
summarize(cran, avg_bytes = mean(size))
library(dpylr)
library(dplyr)
cran <- tbl_df(mydf)
rm("my_df")
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package)
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
filter(pack_sum,count>679)
top_counts <- filter(pack_sum,count>679)
top_counts
head(top_counts,20)
arrange(top_counts,desc(count))
quantile(pack_sum$unique, probs=0.99)
top_unique <-filter(pack_sum,unqiue>465)
top_unique <-filter(pack_sum,unique>465)
top_unique
arrange(top_unique,desc(unique))
submit()
submit()
submit()
submit()
save
?chaining
?chain
submit()
submit()
submit()
submit()
submit()
submit
submit()
submit()
submit()
swirl()
library(tidyr)
students
?gather
gather(students,sex,count, -grade)
students2
gather(students2,sex_class, count,-grade)
res <-gather(students2,sex_class, count,-grade)
res
?seperate
?separate
separate(data=res,col=sex_class,into=c("sex","class"))
submit()
students3
?gather
submit()
?spread
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
mutate(passed,status="passed")
passed <-mutate(passed,status="passed")
failed <- mutate(failed,status="failed")
rbind_list(passed,failed)
sat
submit()
submit()
submit()
x <- rnorm(100)
hist(x)
y <-rnorm(100)
plot(x,y)
library(lattice)
library(nlme)
xyplot(weight~Time|Diet, BodyWeight)
library(datasets)
library(airquality)
data(airquality)
qplot(Wind, Ozone,data=airquality, facets = .~ factor(Month))
library(ggplot2)
library(ggplot)
install.packages("ggplot")
library(ggplot)
library(datasets)
data(airquality)
qplot(Wind, Ozone,data=airquality, facets = .~ factor(Month))
library(ggplot2)
install.packages("ggplot2")
qplot(Wind, Ozone,data=airquality, facets = .~ factor(Month))
library(ggplot)
library(ggplot2)
library(datasets)
data(airquality)
qplot(Wind, Ozone,data=airquality, facets = .~ factor(Month))
airquality = transform(airquality, Month=factor(Month))
qplot(Wind,Ozone, data=airquality, facets = .~ Month)
x<- c(17,14,4,5,13,12,10)
x[x>10] <-4
library(kernlab)
data(spam)
str(spam[,1:5])
set.seed(3435)
trainIndicator = rbinom(4601, size=1, prob=0.5) #half in test, half in train
table(trainIndicator)
trainSpam = spam[trainIndicator ==1,]
testSpam = spam[trainIndicator == 0,]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve+1) ~ trainSpam$type)
Plot(log10(trainSpam[,1:4]+1))
plot(log10(trainSpam[,1:4]+1))
hCluster = hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[,1:55]+1))))
plot(hclusterUpdated)
hClusterUpdated = hclust(dist(t(log10(trainSpam[,1:55]+1))))
plot(hClusterUpdated)
trainSpam$numType =as.numeric(trainSpam$type)-1
costFunction = function(x,y) sum(x != (y>0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55){
lmFormula = reformulate(names(trainSpam)[i],response = "numType")
glmFit = glm(lmFormula, family = "binomial",data= trainSpam)
cvError[i] = cv.glm(trainSpam,glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
predictionModel = glm(numType ~ charDollar, family = "binomial",
data=trainSpam)
predicitonTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
#Classify as 'spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted >0.5] ="spam"
table(predictedSpam, testSpam$type)
table(predictedSpam, testSpam$type)
(61 + 458) /(1346 +458 + 61+ 449)
setwd("/Users/Non-corrupt user/Desktop/Suzy/DataScience/ReproducibleResearch/RepData_PeerAssessment1")
#unzip files - file in forked repo
unzip("activity.zip" )
dateDownloades<-date()
data <- read.csv("activity.csv",header=TRUE)
head(data)
str(data)
library(dplyr)
steps_summary <- data %>%
group_by(date) %>%
summarize(total=sum(steps, na.rm=TRUE,
mean=mean(steps, na.rm=TRUE,
median=median(steps, na,rm=TRUE)))) %>%
print
steps_summary <- data %>%
group_by(date) %>%
summarize(total=sum(steps, na.rm=TRUE),
mean=mean(steps, na.rm=TRUE),
median=median(steps, na,rm=TRUE)) %>%
steps_summary <- data %>%
group_by(date) %>%
summarize(total=sum(steps, na.rm=TRUE),
mean=mean(steps, na.rm=TRUE),
median=median(steps, na,rm=TRUE))
steps_summary <- data %>%
group_by(date) %>%
summarize(total=sum(steps, na.rm=TRUE),
mean=mean(steps, na.rm=TRUE),
median=median(steps, na,rm=TRUE))
steps_summary
steps_summary <- data %>%
group_by(date) %>%
summarize(total=sum(steps, na.rm=TRUE),
mean=mean(steps, na.rm=TRUE),
median=median(steps, na.rm=TRUE))
steps_summary
library(dplyr)
steps_summary <- data %>%
group_by(date) %>%
summarize(total=sum(steps, na.rm=TRUE),
mean=mean(steps, na.rm=TRUE),
median=median(steps, na.rm=TRUE))
steps_summary
median_steps <- tapply(data$steps,data$date,median)
mean_steps <- tapply(data$steps,data$date,mean)
total_steps <- tapply(data$steps,data$date,sum)
total_steps
mean_steps
median_steps
tail(data)
hist(total_steps)
summary(data)
summary(data[steps])
summary(data$steps)
summary(total_steps)
mean(total_steps,na.rm=TRUE)
median(total_steps,na.rm=TRUE)
summary(total_steps)$median
summary(total_steps)[median]
mean_steps<- mean(total_steps,na.rm=TRUE)
mean_steps
?options
scipen
options.scipen
getOptions(scipen)
getOptions("scipen")
getOption("scipen")
getOption("digits")
with(data,plot(type = "l",
xlab="Date",
main="Average No. Steps Taken")
)
with(data,plot(x=Interval,
y=average(steps)
type = "l",
xlab="Date",
main="Average No. Steps Taken"))
with(data,plot(x=Interval,
y=steps
type = "l",
xlab="Date",
main="Average No. Steps Taken"))
steps_by_interval <- data %>%
group_by(interval) %>%
summarize(avg_steps=mean(steps, na.rm=TRUE))%>%
arrange(interval)
steps_by_interval
steps_by_interval
with(data,plot(x=Interval,
y=steps
type = "l",
xlab="Date",
main="Average No. Steps Taken"))
plot(steps_by_interval)
plot(steps_by_interval, type="l")
plot(steps_by_interval, type="l",
ylab="Average Steps per Interval",
xlab="Interval",
main="Average Number of Steps Taken per Interval")
max(steps_by_interval)
steps_by_interval
max(steps_by_interval$avg_steps)
steps_by_interval[,max_steps]
max_steps <-max(steps_by_interval$avg_steps)
steps_by_interval[,max_steps]
steps_by_interval
max_steps <-max(steps_by_interval$avg_steps)
max_steps
max_interval <- steps_by_interval[,max_steps]
max_interval <- steps_by_interval[,which(steps_by_interval$avg_steps)=max_steps]
max_interval <- steps_by_interval[,which(steps_by_interval$avg_steps=max_steps)]
steps_by_interval[,max(steps_by_interval$avg_steps) ]
steps_by_interval
View(steps_summary)
View(steps_by_interval)
max_steps <-max(steps_by_interval$avg_steps)
max_steps
t<-steps_by_interval[,max(steps_by_interval$avg_steps) ]
t<-steps_by_interval[max(steps_by_interval$avg_steps) ,1 ]
t
t<-steps_by_interval[which(steps_by_interval$avg_steps = max_steps),1]
t<-steps_by_interval[which(steps_by_interval$avg_steps == max_steps),1]
t
max_steps <-max(steps_by_interval$avg_steps)
max_int <-steps_by_interval[which(steps_by_interval$avg_steps == max_steps),1]
max_int
is.na(data$steps)
sum(is.na(data$steps))
mean(is.na(data$steps))
sum(is.na(data$date))
sum(is.na(data$interval))
There are `r step_miss` records with missing values for the steps. This represents `r pct_miss` of the records.
View(steps_by_interval)
View(steps_by_interval)
na <- is.na(data$steps)
na <- data[is.na(data$steps),]
na
head(na)
steps_by_interval
library(data.table)
na_DT <- data.table(na)
steps_by_interval_DT <- data.table(steps_by_interval)
setkey(na_DT,interval)
setkey(steps_by_interval_DT,interval)
data_miss_steps <-merge(na_DT,steps_by_interval_DT)
head(data_miss_steps)
data_miss_steps(drop=steps)
data_miss_steps[,steps:=NULL]
head(data_miss_steps)
names(data_miss_steps)[names(data_miss_steps) == "avg_steps"] = "steps"  #renaming col
?help('setnames')
?setnames
setnames(data_miss_steps,"avg_steps","steps")
head(data_miss_steps)
na_DT <- data.table(na)
steps_by_interval_DT <- data.table(steps_by_interval)
setkey(na_DT,interval)
setkey(steps_by_interval_DT,interval)
data_miss_steps <-merge(na_DT,steps_by_interval_DT)
head(data_miss_steps)
data_miss_steps[,steps:=NULL] #dropping steps column - all are NA
setnames(data_miss_steps,"avg_steps","steps")
head(data_miss_steps)
head(data)
datat <- data[!is.na(data$steps),]
data_noNA <- data[!is.na(data$steps),]
data_wimput <- rbind(data_noNA,data_miss_steps)
total_steps <- tapply(data_wimput$steps,data_wimput$date,sum)
hist(total_steps, main="Total Steps", xlab="Number of Steps \n Using Imputted Dataset")
hist(total_steps, main="Total Steps \n Using Imputted Dataset", xlab="Number of Steps")
mean_steps<- mean(total_steps,na.rm=TRUE)
median_steps<- median(total_steps,na.rm=TRUE)
mean_steps
median_steps
if weekday(data_wimput$date) %in% c("Monday","Tuesday","Wednesday","Thursday","Friday") then
data_wimput$weekpart <- "weekday"
else
data_wimput$weekpart <- "weekend"
if (weekday(data_wimput$date) %in% c("Monday","Tuesday","Wednesday","Thursday","Friday")) then
data_wimput$weekpart <- "weekday"
else
data_wimput$weekpart <- "weekend"
if (weekdays(data_wimput$date) %in% c("Monday","Tuesday","Wednesday","Thursday","Friday")) then
data_wimput$weekpart <- "weekday"
else
data_wimput$weekpart <- "weekend"
data_wimput$weekday <-weekdays(data_wimput$date)
str(data_wimput)
data_wimput <- rbind(data_noNA,data_miss_steps) #dataset to work with
data_wimput$weekday <-weekdays(as.Date(data_wimput$date,"%Y-%m-%d"))
head(data_wimput)
if (data_wimput$weekday %in% c("Monday","Tuesday","Wednesday","Thursday","Friday")){
data_wimput$weekpart <- "weekday" }
else {
data_wimput$weekpart <- "weekend"}
str(data_wimput)
data_wimput$weekday <- as.factor(weekdays)
data_wimput$weekday <- as.factor(data_wimput$weekdays)
data_wimput$weekday <- factor(data_wimput$weekdays)
data_wimput <- rbind(data_noNA,data_miss_steps) #dataset to work with
data_wimput$weekday <-factor(weekdays(as.Date(data_wimput$date,"%Y-%m-%d")))
head(data_wimput)
str(data_wimput)
str(data_wimput)
if (data_wimput$weekday %in% c("Monday","Tuesday","Wednesday","Thursday","Friday")){
data_wimput$weekpart <- "weekday" }
else {
data_wimput$weekpart <- "weekend"}
